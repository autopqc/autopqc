adversary M: List_{d} Qubit -> Bool.

(* QPRF assumption *)
adversary A_qprf : () -> List_{d} Qubit.
operator PRF: (BS_key * BS_msg) -> BS_tag.
operator RF: BS_msg -> BS_tag.
oracle H: BS_msg -> BS_tag.

assumption qprf
[ k <-$ BS_key;
  rho <- A_qprf() with 
  H(x) = {
      return PRF(k, x)
    }; b <- M(rho); ]
[ rho <- A_qprf() with 
  H(x) = {
      return RF(x)
    }; b <- M(rho); ].

  bound_succ
  [ (* MAC key *)
    k <-$ BS_key;
    rho <- A_qprf() with
    H(x) = {
        let inp = x;
        let ret = PRF(k,inp);
        return ret
      }; b <- M(rho);
    ] : b.

        (* abstract 1 a_arg(). *)

    abstract 2 a_arg().
    abstract 4 out rho.
(*
    hybrid (3,1) {
      let inp = x;
      let ret = PRF(k,inp);
      return ret
    }.
    dist_eq.
*)
    assumption_decisional * qprf -> [
      k, k;
      rho, out;
      b, b;
      H`x, H`inp
    ] 2 4 [3 [(1 1 2 H)]].
    
(*
(* QRO assumption *)
adversary A_qro : () -> List_{d} Qubit.
adversary M': List_{d} Qubit -> List_{q+1} (BS_msg * BS_tag).
operator V : List_{q+1} (BS_msg * BS_tag) -> Bool.

assumption qro succ
[ k <-$ BS_key;
  rho <- A_qro() with
  H(x) = {
    return PRF(k,x)
  }; mt <- M'(rho);
  ] : V(mt).

(* PRF-based MAC *)
adversary A_cma: () -> List_{d} Qubit.
oracle MAC: BS_msg -> BS_tag.

    
bound_succ
[ (* MAC key *)
    k <-$ BS_key;
    rho <- A_cma() with
      H(x) = {
        return PRF(k, x)
      }; m <- M'(rho); let b = V(m);
    ] : b.

    abstract 2 a_arg ().
    assumption_decisional * qprf -> [k, k] 2 5 [3 4 H].
    
    abstract 2 a_arg ().
    abstract 4 a_ret rho.
    abstract 5 b (M(a_ret)).


  assumption_decisional * qprf <- [
    k, k
  ] 3 4 [3 [(1 1 1 H)]].

*)

  